//
//  AesSivTests.swift
//  CryptomatorCryptoLibTests
//
//  Created by Sebastian Stenzel on 29.04.20.
//  Copyright Â© 2020 Skymatic GmbH. All rights reserved.
//

import XCTest
@testable import CryptomatorCryptoLib

class AesSivTests: XCTestCase {
	let aesKey: [UInt8] = [
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
		0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
	]

	let macKey: [UInt8] = [
		0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8,
		0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0
	]

	let ad: [UInt8] = [
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
		0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27
	]

	func testEncrypt() {
		let plaintext: [UInt8] = [
			0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
			0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE
		]

		let expected: [UInt8] = [
			0x85, 0x63, 0x2D, 0x07, 0xC6, 0xE8, 0xF3, 0x7F,
			0x95, 0x0A, 0xCD, 0x32, 0x0A, 0x2E, 0xCC, 0x93,
			0x40, 0xC0, 0x2B, 0x96, 0x90, 0xC4, 0xDC, 0x04,
			0xDA, 0xEF, 0x7F, 0x6A, 0xFE, 0x5C
		]

		let result = try? AesSiv.encrypt(aesKey: aesKey, macKey: macKey, plaintext: plaintext, ad: ad)

		XCTAssertEqual(expected, result)
	}

	func testDecrypt() {
		let ciphertext: [UInt8] = [
			0x85, 0x63, 0x2D, 0x07, 0xC6, 0xE8, 0xF3, 0x7F,
			0x95, 0x0A, 0xCD, 0x32, 0x0A, 0x2E, 0xCC, 0x93,
			0x40, 0xC0, 0x2B, 0x96, 0x90, 0xC4, 0xDC, 0x04,
			0xDA, 0xEF, 0x7F, 0x6A, 0xFE, 0x5C
		]

		let expected: [UInt8] = [
			0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
			0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE
		]

		let result = try? AesSiv.decrypt(aesKey: aesKey, macKey: macKey, ciphertext: ciphertext, ad: ad)

		XCTAssertEqual(expected, result)
	}

	func testCtr() {
		let aesKey: [UInt8] = [
			0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
			0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F
		]

		let iv: [UInt8] = [
			0x7B, 0xDB, 0x6E, 0x3B, 0x43, 0x26, 0x67, 0xEB,
			0x06, 0xF4, 0xD1, 0x4B, 0x7F, 0x2F, 0xBD, 0x0F
		]

		let plaintext = [UInt8](repeating: 0x00, count: 16 * 3)

		let expected: [UInt8] = [
			0xBF, 0xF8, 0x66, 0x5C, 0xFD, 0xD7, 0x33, 0x63,
			0x55, 0x0F, 0x74, 0x00, 0xE8, 0xF9, 0xD3, 0x76,
			0xB2, 0xC9, 0x08, 0x8E, 0x71, 0x3B, 0x86, 0x17,
			0xD8, 0x83, 0x92, 0x26, 0xD9, 0xF8, 0x81, 0x59,
			0x9E, 0x44, 0xD8, 0x27, 0x23, 0x49, 0x49, 0xBC,
			0x1B, 0x12, 0x34, 0x8E, 0xBC, 0x19, 0x5E, 0xC7
		]

		let result = try? AesSiv.ctr(aesKey: aesKey, iv: iv, plaintext: plaintext)

		XCTAssertEqual(expected, result)
	}

	func testS2v() {
		let plaintext: [UInt8] = [
			0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
			0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE
		]

		let expected: [UInt8] = [
			0x85, 0x63, 0x2D, 0x07, 0xC6, 0xE8, 0xF3, 0x7F,
			0x95, 0x0A, 0xCD, 0x32, 0x0A, 0x2E, 0xCC, 0x93
		]

		let result = try? AesSiv.s2v(macKey: macKey, plaintext: plaintext, ad: [ad])

		XCTAssertEqual(expected, result)
	}

	func testCmac1() {
		let macKey: [UInt8] = [
			0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
			0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C
		]
		let message: [UInt8] = []
		let expected: [UInt8] = [
			0xBB, 0x1D, 0x69, 0x29, 0xE9, 0x59, 0x37, 0x28,
			0x7F, 0xA3, 0x7D, 0x12, 0x9B, 0x75, 0x67, 0x46
		]
		let result = try? AesSiv.cmac(macKey: macKey, data: message)

		XCTAssertEqual(expected, result)
	}

	func testCmac2() {
		let macKey: [UInt8] = [
			0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
			0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C
		]
		let message: [UInt8] = [
			0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
			0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A
		]
		let expected: [UInt8] = [
			0x07, 0x0A, 0x16, 0xB4, 0x6B, 0x4D, 0x41, 0x44,
			0xF7, 0x9B, 0xDD, 0x9D, 0xD0, 0x4A, 0x28, 0x7C
		]
		let result = try? AesSiv.cmac(macKey: macKey, data: message)

		XCTAssertEqual(expected, result)
	}

	func testCmac3() {
		let macKey: [UInt8] = [
			0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
			0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C
		]
		let message: [UInt8] = [
			0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
			0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
			0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C,
			0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
			0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11
		]
		let expected: [UInt8] = [
			0xDF, 0xA6, 0x67, 0x47, 0xDE, 0x9A, 0xE6, 0x30,
			0x30, 0xCA, 0x32, 0x61, 0x14, 0x97, 0xC8, 0x27
		]
		let result = try? AesSiv.cmac(macKey: macKey, data: message)

		XCTAssertEqual(expected, result)
	}

	func testCmac4() {
		let macKey: [UInt8] = [
			0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
			0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C
		]
		let message: [UInt8] = [
			0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
			0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
			0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C,
			0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
			0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11,
			0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
			0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17,
			0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
		]
		let expected: [UInt8] = [
			0x51, 0xF0, 0xBE, 0xBF, 0x7E, 0x3B, 0x9D, 0x92,
			0xFC, 0x49, 0x74, 0x17, 0x79, 0x36, 0x3C, 0xFE
		]
		let result = try? AesSiv.cmac(macKey: macKey, data: message)

		XCTAssertEqual(expected, result)
	}
}
